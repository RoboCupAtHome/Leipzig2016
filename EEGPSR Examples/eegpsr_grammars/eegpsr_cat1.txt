##############################################################################
#
# Eegpsr_cat1 Grammar
# 
# Author:  Mauricio Matamoros
# Date:    June 2016
#
# IMPORTANT: 
# Since this document declares a grammar for generating sentences,
# NO RECURSIVE rules must be used.
# 
##############################################################################

/*****************************************************************************
*
* FORMAT
*
******************************************************************************
*
* ROOT
* The root rule S of the grammar is the $Main Non-Terminal. In order for the
* grammar to be valid, it must contain at least one $Main rule.
*
* Non-Terminal identifiers
* A valid Non-Terminal identifier is a sequence of one or more letters,
* digits, or underscore characters (_). Spaces, punctuation marks, and symbols
* cannot be part of a Non-Terminal identifier.
*
* Wildcards
* Wilcards are strings within braces which are used during random sentence
* generation, replacing them by random values. The same random value may be
* specified for a set of wildcards by specifying an ID. Also, the type may
* be optionally specified. Syntax is as follows:
*
*	{wildcard [type] [id] [meta:[metadata]]}
*
* When the "meta:" literal string is found within a wildcard, all text
* following it is addressed as metadata. While etadata is not part of the 
* generated sentence, it can be used to display additional information.
*
* The following wildcards are defined:
*	{category}	An object category.
*				Types are ignored.
*	{gesture}	A gesture name.
*				Types are ignored.
*	{location}	Any location.
*				Types may be [room|placement|beacon]
*	{name}		A person name.
*				Types may be [male|female]
*	{object}	An object name.
*				Types may be [known|alike]
*	{question}	The "question" literal string.
*				Types are ignored. Metadata contains a question/answer
*				from the predefined questions set.
*	{void}		Void construct used to inject metadata.
*
*				Types are ignored.
* Also, the following alias are defined
*	{beacon}	Alias for {location beacon}
*	{aobject}	Alias for {object alike}
*	{female}	Alias for {name female}
*	{kobject}	Alias for {object known}
*	{male}		Alias for {name male}
* 	{placement}	Alias for {location placement}
*	{room}		Alias for {location room}
*
* Obfuscating information 
* A wildcard ended with a question mark will be replaced by an obfuscated
* value instead of the random value choosen by that wildcard, which will
* be included as metadata.
* The obfuscation is performed as follows (wildcards not shown can not
* be obfuscated):
*	{category}	The "objects" literal string
*	{location}	The "room" literal string for rooms, for placements and
*				beacons, the room to which the location belongs.
*	{object}	The category to which the object belongs.
*
* Comments
* C/C++/Java comments are permitted.
* In addition, any words, spaces, or marks after # or % or ; will be ignored
*
* Defining grammar name and tier
* The grammar name and tier may be set as a comment with the lines:
* ; grammar name MyGrammar
* ; grammar tier High
* Accepted values for the tier are Easy, Moderate, and High
*
*
*****************************************************************************/

; grammar name Cat1 - Advanced Manipulation
; grammar tier High

$Main     = $advman

##############################################################################
#
# Serving breakfast
#
##############################################################################

$advman   = $polite bring me something for breakfast; Up to the team to solve
$advman   = $polite serve the breakfast; Up to the team how to solve
$advman   = $polite bring me some $cereal, $fuit and $drink in a tray


##############################################################################
#
# Pouring
#
##############################################################################
$advman   = {void meta: If asked, serve at {placement}} $pour
$pour     = $polite $vbpour some $cereal in a bowl
$pour     = $polite $vbpour some $drink in a bowl


##############################################################################
#
# Opening
#
##############################################################################
$advman   = $polite open the (entrance | exit | corridor) door


##############################################################################
#
# Bringing
#
##############################################################################
$advman   = $polite bring me the (tray | bowl)
$advman   = $polite pick up the (tray | bowl) and put it onto the {placement}
$advman   = $polite bring the $object to the {placement}
$advman   = $polite bring me the $object
$advman   = put all the {category} on the {placement}


##############################################################################
#
# Pick and place
#
##############################################################################
$advman   = $takeadv, and ($place | $deliver)
$advman   = $take, and $placeadv

$take     = $vbtake the {aobject} from the {placement}
$place    = $vbplace it to the {placement}
$deliver  = $vbdeliver it to (me | {name} in the {beacon})
$takeadv  = $vbtake the {aobject} from the $enclosed
$placeadv = $vbplace it into the $enclosed
$enclosed = fridge | microwave | oven | box












##############################################################################
#
# Polite
#
##############################################################################
$polite = {void} | Please
$polite = Could you
$polite = Robot please
$polite = Could you please

##############################################################################
#
# Breakfast elements
#
##############################################################################
$cereal	= pretzels | pringles | chips
$fruit	= apple | paprika
$drink	= beer | (coconut milk) | coke

##############################################################################
#
# Hard to manipulate objects
#
##############################################################################
$object = egg | baby sweets | (choco syrup) | cloth

##############################################################################
#
# Verbs
#
##############################################################################
$vbpour = pour | serve
$vbtake  = get | grasp | take | pick up
$vbplace = deliver | put | place
$vbdeliver = bring | deliver | give | hand
