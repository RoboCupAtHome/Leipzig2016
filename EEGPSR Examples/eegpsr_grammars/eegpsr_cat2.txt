##############################################################################
#
# Eegpsr_cat2 Grammar
# 
# Author:  Mauricio Matamoros
# Date:    June 2016
#
# IMPORTANT: 
# Since this document declares a grammar for generating sentences,
# NO RECURSIVE rules must be used.
# 
##############################################################################

/*****************************************************************************
*
* FORMAT
*
******************************************************************************
*
* ROOT
* The root rule S of the grammar is the $Main Non-Terminal. In order for the
* grammar to be valid, it must contain at least one $Main rule.
*
* Non-Terminal identifiers
* A valid Non-Terminal identifier is a sequence of one or more letters,
* digits, or underscore characters (_). Spaces, punctuation marks, and symbols
* cannot be part of a Non-Terminal identifier.
*
* Wildcards
* Wilcards are strings within braces which are used during random sentence
* generation, replacing them by random values. The same random value may be
* specified for a set of wildcards by specifying an ID. Also, the type may
* be optionally specified. Syntax is as follows:
*
*	{wildcard [type] [id] [meta:[metadata]]}
*
* When the "meta:" literal string is found within a wildcard, all text
* following it is addressed as metadata. While etadata is not part of the 
* generated sentence, it can be used to display additional information.
*
* The following wildcards are defined:
*	{category}	An object category.
*				Types are ignored.
*	{gesture}	A gesture name.
*				Types are ignored.
*	{location}	Any location.
*				Types may be [room|placement|beacon]
*	{name}		A person name.
*				Types may be [male|female]
*	{object}	An object name.
*				Types may be [known|alike]
*	{question}	The "question" literal string.
*				Types are ignored. Metadata contains a question/answer
*				from the predefined questions set.
*	{void}		Void construct used to inject metadata.
*
*				Types are ignored.
* Also, the following alias are defined
*	{beacon}	Alias for {location beacon}
*	{aobject}	Alias for {object alike}
*	{female}	Alias for {name female}
*	{kobject}	Alias for {object known}
*	{male}		Alias for {name male}
* 	{placement}	Alias for {location placement}
*	{room}		Alias for {location room}
*
* Obfuscating information 
* A wildcard ended with a question mark will be replaced by an obfuscated
* value instead of the random value choosen by that wildcard, which will
* be included as metadata.
* The obfuscation is performed as follows (wildcards not shown can not
* be obfuscated):
*	{category}	The "objects" literal string
*	{location}	The "room" literal string for rooms, for placements and
*				beacons, the room to which the location belongs.
*	{object}	The category to which the object belongs.
*
* Comments
* C/C++/Java comments are permitted.
* In addition, any words, spaces, or marks after # or % or ; will be ignored
*
* Defining grammar name and tier
* The grammar name and tier may be set as a comment with the lines:
* ; grammar name MyGrammar
* ; grammar tier High
* Accepted values for the tier are Easy, Moderate, and High
*
*
*****************************************************************************/

; grammar name Cat2 - Advanced Object Recognition
; grammar tier High

$Main = $advor

##############################################################################
#
# Bring from description
#
##############################################################################
$advor	= $polite bring me the $bwhat from the {placement 1}.
$advor	= $polite take the $bwhat from the {placement 1} to the {placement 2}.
$advor	= $polite bring me the {category} at the $rpos {placement 1}.
$advor	= Take the {category} at the {placement 1}'s $rpos to the {placement 2}.

$bwhat  = $desc (object | {category})
$rpos	= left | right | center | middle bottom | top
$desc   = $color | biggest | smallest | tallest | (left-most) | (right-most)
$color	= blue | yellow | black | white | red | orange | gray

##############################################################################
#
# Count
#
##############################################################################
$advor	= $polite tell $repwho how many $dwhat are in the {placement 1}.
$advor	= $polite count the $dwhat at the {placement 1} and $report.

$dwhat  = ({category} items) | $color ( {object} | {category} objects )
$report = $vbreport $repwho
$repwho = (me | {name meta:{name} is in the {becon}} | {name} in the {beacon})
$vbreport = inform | (report to)

##############################################################################
#
# Describe
#
##############################################################################
$advor	= $polite describe the objects in the {placement} to $repwho









##############################################################################
#
# Polite
#
##############################################################################
$polite = {void} | Please
$polite = Could you
$polite = Robot please
$polite = Could you please
